"use strict";
 //класификация функций есть таблица к урокам. 3 типа:
 // 1)Function declaration что прошли класический(есть одна особеность она существует еще до того как код запустится)
//негласное правило - функцию нужно называть глаголом с препиской того над чем выполняется действие 

function showFirstMessage () {   // () -аргументы функции / внутри {} выполняются действия
 console.log("Hello world");
}

showFirstMessage();

let num = 20 // глобальная переменная переменная которая создана в не функции

function showFirstMessage (text) {   // аргументов может быть много
    console.log(text);
    let num = 10; // локальная переменная
   //  num = 10;  // обращается к глобальной переменной
   console.log(num);
   }
   
   showFirstMessage("Hello world");
   console.log(num);

   // что такое замыкание функци: когда внутри какой-то функции есть обращение к какой-то пременной она сначало ищет внутри себя и в случае
   // если не нашла идет на уровень выше(к глобальной) .Идёт до самого высшего уровня что ей доступны 
   //По простому - замыкание функции это сама функция вместе совсеми внешними переменными которые ей доступны

//фуекция с return 

   function calc(a, b) {
      return (a + b);
     // console.log('dwed'); данный код будет мертвый после return мы ничего не задаём
   }

   console.log(calc(4, 3));
   console.log(calc(5, 6));
   console.log(calc(10, 6));

   // выполнение return внутри функции
    function ret (num) {
       let num = 50;
       return num;
   }

   const anotherNum = ret();
   console.log(anotherNum);



   // 2)Function expression  сначало нужно объявить переменную. Главное отличие от класической что она создается только тогда когда до нее доходит
   // поток кода и ее можно вызвать только после объявления. Работает как и переменная 

   const logger = function() {
       console.log(Hello);

   };

logger();

// 3) Стрелочная функци - данная функция имеет одну особенность она не имеет своего контекста вызова 

const calc = (a, b) => a + b; // сокращенный вариант

const calc = (a, b) => { return a + b };