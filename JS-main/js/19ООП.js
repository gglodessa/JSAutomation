"use strict"

//немного из истории давным давно программыв создавали просто из набора функций которые вызвали друг друга
// джава скрипт является объектно орентированым языком и главную роль в нем играет объект
//он может в себе содержать методы свойстава любой тип данных, некая сужность
//ПРИМЕР
//автомобль у него есть такие свойста как двигатель, кузов, колеса
//и есть такие методы как езда,перевозка груза что он умеет сделать
//смысл этого весго что мы представляем объект как набор свойст и методов. 
//напримере строки у нее есть такое свойство как длина строки и метод как изменить регистр
//или модицфикации или прочего прочего

//пример того как работает джава скрипт он оборачивает строку в какой-то объекм
//потом использует метод какой-то какой есть у этого типа данных а потом возвращает все в исходное значение
let str = "some"; //был примитив
let strObj = new String(str);//в работе стал объектом

console.log(typeof(str));
console.log(typeof(strObj));

//как джава скрипт понимает что нужно делать:
//Когда мы создаем строки или масивы все они могут содержать обсалютно разные
//наполения но каждый из них может обладать одними и теме же методами
//ЛЮБЫЕ КОНСТРУКЦИИ В ДЖАВА СКРИПТНАСЛЕДУЮТСЯ ОТ ОБЪЕКТА ПО ЦЕПОЧКЕ
//ЧИСЛО - МЕТОДЫ ЧИСЕЛ- ДРУГИЕ ОБЪЕКТЫ МЕТОДОВ
//МАСИВ -  ДРУГИЕ МЕТОДЫ МАССИВОВ -  ДРУГИЕ МЕТОДЫ ОБЪЕКТОВ


const soldier = {
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log('Hello!');
    }
};

const jonh = {
    health: 100
};

jonh.__proto__ = soldier;
console.log(jonh); // обычный джон
console.log(jonh.armor); // получил броню
jonh.sayHello(); //получит функцию говорить

//сейчас место proto нужно использовать: обжект креате(создает объектс прототипом), обжект гетпротетайпоу(получает прототи) и сетпротайп(устанавливает прототип)
//ПРИМЕР:

const soldier = {
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log('Hello!');
    }
};

const jonh = {
    health: 100
};

Object.setPrototypeOf(jonh, soldier);//утсновили пртотип
jonh.sayHello();

//но на практике все выглядит иначе

const soldier = {
    health: 400,
    armor: 100,
    sayHello: function() {
        console.log('Hello!');
    }
};

const jonh = Object.create(soldier);// создаем новый объект который будет прототипно наследоваться от солдата
jonh.sayHello();

//ИТОГИ: ООП это наука о том как делать правильную архитектуру 
//так же джава скрипт можно называть прототипным языком програмирования
//это частный случай ооп один из его стилей так как в джава скрипте все строится на прототипах
